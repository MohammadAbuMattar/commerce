<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itsthatjun.ecommerce.mbg.mapper.ReturnItemMapper">
  <resultMap id="BaseResultMap" type="com.itsthatjun.ecommerce.mbg.model.ReturnItem">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="return_request_id" jdbcType="BIGINT" property="returnRequestId" />
    <result column="brand_id" jdbcType="BIGINT" property="brandId" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="order_sn" jdbcType="VARCHAR" property="orderSn" />
    <result column="product_id" jdbcType="BIGINT" property="productId" />
    <result column="product_sku" jdbcType="VARCHAR" property="productSku" />
    <result column="purchased_price" jdbcType="NUMERIC" property="purchasedPrice" />
    <result column="quantity" jdbcType="BIGINT" property="quantity" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, return_request_id, brand_id, order_id, order_sn, product_id, product_sku, purchased_price, 
    quantity
  </sql>
  <select id="selectByExample" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItemExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from return_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from return_item
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from return_item
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItemExample">
    delete from return_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItem" useGeneratedKeys="true">
    insert into return_item (return_request_id, brand_id, order_id, 
      order_sn, product_id, product_sku, 
      purchased_price, quantity)
    values (#{returnRequestId,jdbcType=BIGINT}, #{brandId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, 
      #{orderSn,jdbcType=VARCHAR}, #{productId,jdbcType=BIGINT}, #{productSku,jdbcType=VARCHAR}, 
      #{purchasedPrice,jdbcType=NUMERIC}, #{quantity,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItem" useGeneratedKeys="true">
    insert into return_item
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="returnRequestId != null">
        return_request_id,
      </if>
      <if test="brandId != null">
        brand_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderSn != null">
        order_sn,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="productSku != null">
        product_sku,
      </if>
      <if test="purchasedPrice != null">
        purchased_price,
      </if>
      <if test="quantity != null">
        quantity,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="returnRequestId != null">
        #{returnRequestId,jdbcType=BIGINT},
      </if>
      <if test="brandId != null">
        #{brandId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="orderSn != null">
        #{orderSn,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=BIGINT},
      </if>
      <if test="productSku != null">
        #{productSku,jdbcType=VARCHAR},
      </if>
      <if test="purchasedPrice != null">
        #{purchasedPrice,jdbcType=NUMERIC},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItemExample" resultType="java.lang.Long">
    select count(*) from return_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update return_item
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.returnRequestId != null">
        return_request_id = #{record.returnRequestId,jdbcType=BIGINT},
      </if>
      <if test="record.brandId != null">
        brand_id = #{record.brandId,jdbcType=BIGINT},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.orderSn != null">
        order_sn = #{record.orderSn,jdbcType=VARCHAR},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=BIGINT},
      </if>
      <if test="record.productSku != null">
        product_sku = #{record.productSku,jdbcType=VARCHAR},
      </if>
      <if test="record.purchasedPrice != null">
        purchased_price = #{record.purchasedPrice,jdbcType=NUMERIC},
      </if>
      <if test="record.quantity != null">
        quantity = #{record.quantity,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update return_item
    set id = #{record.id,jdbcType=INTEGER},
      return_request_id = #{record.returnRequestId,jdbcType=BIGINT},
      brand_id = #{record.brandId,jdbcType=BIGINT},
      order_id = #{record.orderId,jdbcType=BIGINT},
      order_sn = #{record.orderSn,jdbcType=VARCHAR},
      product_id = #{record.productId,jdbcType=BIGINT},
      product_sku = #{record.productSku,jdbcType=VARCHAR},
      purchased_price = #{record.purchasedPrice,jdbcType=NUMERIC},
      quantity = #{record.quantity,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItem">
    update return_item
    <set>
      <if test="returnRequestId != null">
        return_request_id = #{returnRequestId,jdbcType=BIGINT},
      </if>
      <if test="brandId != null">
        brand_id = #{brandId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="orderSn != null">
        order_sn = #{orderSn,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="productSku != null">
        product_sku = #{productSku,jdbcType=VARCHAR},
      </if>
      <if test="purchasedPrice != null">
        purchased_price = #{purchasedPrice,jdbcType=NUMERIC},
      </if>
      <if test="quantity != null">
        quantity = #{quantity,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.itsthatjun.ecommerce.mbg.model.ReturnItem">
    update return_item
    set return_request_id = #{returnRequestId,jdbcType=BIGINT},
      brand_id = #{brandId,jdbcType=BIGINT},
      order_id = #{orderId,jdbcType=BIGINT},
      order_sn = #{orderSn,jdbcType=VARCHAR},
      product_id = #{productId,jdbcType=BIGINT},
      product_sku = #{productSku,jdbcType=VARCHAR},
      purchased_price = #{purchasedPrice,jdbcType=NUMERIC},
      quantity = #{quantity,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>